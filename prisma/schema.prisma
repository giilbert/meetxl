// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String               @id @default(cuid())
    name          String?
    email         String?              @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    organizations OrganizationMember[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model OrganizationMember {
    organizationId String
    userId         String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    role               MemberRole
    createdJoinCodes   JoinCode[]
    MeetingParticipant MeetingParticipant[]

    @@id([organizationId, userId])
}

model JoinCode {
    id     String             @id @default(cuid())
    code   String             @unique
    issuer OrganizationMember @relation(fields: [organizationMemberOrganizationId, organizationMemberUserId], references: [organizationId, userId])
    uses   Int                @default(0)
    role   MemberRole

    organization                     Organization @relation(fields: [organizationId], references: [id])
    organizationId                   String
    organizationMemberOrganizationId String
    organizationMemberUserId         String
}

model MeetingParticipant {
    meetingId            String
    memberOrganizationId String
    memberUserId         String
    member               OrganizationMember @relation(fields: [memberOrganizationId, memberUserId], references: [organizationId, userId])
    meeting              Meeting            @relation(fields: [meetingId], references: [id])

    @@id([meetingId, memberOrganizationId, memberUserId])
}

model MeetingReward {
    id        String              @id @default(cuid())
    key       String
    value     Float
    action    MeetingRewardAction
    meeting   Meeting             @relation(fields: [meetingId], references: [id])
    meetingId String

    @@unique([meetingId, key])
}

model Meeting {
    id               String               @id @default(cuid())
    name             String
    slug             String
    maxParticipants  Int?
    participants     MeetingParticipant[]
    rewardsEnabled   Boolean              @default(false)
    rewards          MeetingReward[]
    organizationSlug String
    organization     Organization         @relation(fields: [organizationSlug], references: [slug])

    @@unique([organizationSlug, slug])
}

model Organization {
    id   String @id @default(cuid())
    name String
    slug String @unique

    members   OrganizationMember[]
    joinCodes JoinCode[]
    meetings  Meeting[]
}

enum MeetingRewardAction {
    INCREMENT
    DECREMENT
    SET
}

enum MemberRole {
    ADMIN
    MEMBER
}
